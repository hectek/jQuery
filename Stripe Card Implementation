
<style>
    .StripeElement {
        background-color: white;
        height: 40px;
        padding: 10px 12px;
        border-radius: 4px;
        border: 1px solid #ccd0d2;
        box-shadow: inset 0 1px 1px rgba(0,0,0,.075);
        -webkit-transition: box-shadow 150ms ease;
        transition: box-shadow 150ms ease;
    }

    .StripeElement--focus {
        box-shadow: 0 1px 3px 0 #cfd7df;
    }

    .StripeElement--invalid {
        border-color: #fa755a;
    }

    .StripeElement--webkit-autofill {
        background-color: #fefde5 !important;
    }

    #card-errors {
        color: #fa755a;
    }

    .error {
        color: red;
    }
</style>

<div style="padding: 30px;">
    <h2>Stripe</h2>
    <div class="col-md-6 mx-auto" style="padding:20px;">
        <div id="pay-invoice" class="card">
            <div class="card-body">
                <div class="card-title">
                    <h3 class="text-center">Pay Invoice</h3>
                </div>
                <hr>

                <form id="payment-form">
                    <div class="form-group text-center">
                        <ul class="list-inline">
                            <li class="list-inline-item"><i class="text-muted fa fa-cc-visa fa-2x"></i></li>
                            <li class="list-inline-item"><i class="fa fa-cc-mastercard fa-2x"></i></li>
                            <li class="list-inline-item"><i class="fa fa-cc-amex fa-2x"></i></li>
                            <li class="list-inline-item"><i class="fa fa-cc-discover fa-2x"></i></li>
                        </ul>
                    </div>

                    <div class="form-group">
                        <label for="product" class="control-label mb-1">Select Product</label>
                        <select name="Product" class="custom-select" id="product">
                            <option value="" selected disabled hidden>...</option>
                            <option value="1">One Time Purchase</option>
                            <option value="2">Monthly Subscription ($10.00)</option>
                            <!--<option value="3">Monthly Usage Subscription  ($0.10)</option>-->
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="cc-payment" class="control-label mb-1">Payment amount</label>
                        <input id="cc-payment" name="Amount" type="text" class="form-control">

                    </div>
                    <div class="form-group has-success">
                        <label for="cc-name" class="control-label mb-1">Name on card</label>
                        <input id="cc-name" name="Name" type="text" class="form-control cc-name" value="JOE">

                    </div>
                    <div class="form-group">
                        <label for="x_zip" class="control-label mb-1">Postal Code</label>
                        <input id="x_zip" name="Postal Code" type="text" class="form-control" value="92345">
                    </div>

                    <!--  STRIPE ELEMENT-->
                    <div class="form-group">
                        <label for="x_zip" class="control-label mb-1">Credit Card</label>
                        <div id="card-element">
                            <!-- A Stripe Element will be inserted here. -->
                        </div>
                        <div id="card-errors" role="alert"></div>
                    </div>

                    <button id="payment-button" type="submit" class="btn btn-lg btn-info btn-block">
                        <i class="fa fa-lock fa-lg"></i>&nbsp;
                        <span id="payment-button-amount">Pay</span>
                        <span id="payment-button-sending" style="display:none;">Sendingâ€¦</span>
                    </button>
                </form>

            </div>
        </div>

    </div>

</div>


// Include stripe file
<script type="text/javascript" src="https://js.stripe.com/v3/"></script>
<script src="~/Scripts/web/core/webApp.js"></script>


<script type="text/javascript">

    (function () {

        // Create a Stripe client.
        var stripe = Stripe('_testClient');

        // Create an instance of stripe elements.
        var elements = stripe.elements();

        // Custom styling can be passed to options when creating an Element.
        var style = {
            base: {
                color: '#32325d',
                lineHeight: '18px',
                fontFamily: '"Helvetica Neue", Helvetica, sans-serif',
                fontSmoothing: 'antialiased',
                fontSize: '16px',
                '::placeholder': {
                    color: '#aab7c4'
                }
            },
            invalid: {
                color: '#fa755a',
                iconColor: '#fa755a'
            }
        };

        // Create an instance of the card element.
        var card = elements.create('card', {
            style: style,
            hidePostalCode: true
        });

        // Add an instance of the card Element into the `card-element` <div>.
        card.mount('#card-element');

        // Handle real-time validation errors from the card Element.
        card.addEventListener('change', function (event) {
            var displayError = document.getElementById('card-errors');
            if (event.error) {
                displayError.textContent = event.error.message;
            } else {
                displayError.textContent = '';
            }
        });

        // Handle form submission.
        var form = document.getElementById('payment-form');
        form.addEventListener('submit', function (event) {
            event.preventDefault();

            stripe.createToken(card).then(function (result) {
                if (result.error) {
                    // Inform the user if there was an error.
                    var errorElement = document.getElementById('card-errors');
                    errorElement.textContent = result.error.message;
                } else {
                    // Send the token to your server.
                    stripeTokenHandler(result.token);
                }
            });
        });

        // Submit the token and the rest of your form to server
        function stripeTokenHandler(token) {
            // Insert the token ID into the form so it gets submitted to the server
            var form = document.getElementById('payment-form');
            var hiddenInput = document.createElement('input');
            hiddenInput.setAttribute('type', 'hidden');
            hiddenInput.setAttribute('name', 'stripeToken');
            hiddenInput.setAttribute('value', token.id);  // Stripe Token Id
            form.appendChild(hiddenInput);

            // Submit the form
            webApp.page.handlers.chargeCC(token.id);
        }



        webApp.page.startUp = () => {

            webApp.page.purchaseType = null;
            webApp.page.initializeValidation();
            $("#product").bind('change', webApp.page.handlers.setProduct);

        }

        webApp.page.handlers.chargeCC = tokenId => {
            if ($("#payment-form").valid()) {
                const info = webApp.utilities.readForm(tokenId);
                info.PurchaseTypeId == 1 ? webApp.page.Checkout(info) : webApp.page.Subscription(info);
            }
        }

        webApp.page.successCheckout = data => {
            $("#payment-form")[0].reset();
            card.clear();
            alert('Successful payment');
        }


        webApp.page.handlers.setProduct = function () {
            let product = $("#product").val();
            webApp.page.Description = 'Single Charge'
            if (product == 2) {
                // Some set subscription values
                $("#cc-payment").val(10.00);
                webApp.page.Description = 'Monthly Subscription'
            }
        }

        webApp.utilities.readForm = tokenID => ({
            PaymentTypeId: 1
            , PurchaseTypeId: $("#product").val()
            , Amount: webApp.utilities.convertAmount($("#cc-payment").val())
            , Description: webApp.page.Description
            , Currency: "usd"
            , Name: $("#cc-name").val()
            , PostalCode: $("#x_zip").val()
            , Token: tokenID
        })


        //AJAX Requests

        webApp.page.Checkout = data => {
            let url = "https://community.local/api/billing";
            const settings = {
                data: data,
                type: "POST",
                success: webApp.page.successCheckout,
                error: webApp.page.error
            }
            $.ajax(url, settings);
        }

        webApp.page.Recurring = data => {
            let url = "https://community.local/api/billing/recurring";
            const settings = {
                data: data,
                type: "POST",
                success: webApp.page.successCheckout,
                error: webApp.page.error
            }
            $.ajax(url, settings);
        }

        webApp.page.Subscription = data => {
            let planId = "plan_CmQX9XO7cXIqTC";
            data.Amount = 1000;
            data.PurchaseTypeId = 2;
            let url = "https://community.local/api/billing/subscribe/" + planId;
            const settings = {
                data: data,
                type: "POST",
                success: webApp.page.successCheckout,
                error: webApp.page.error
            }
            $.ajax(url, settings);
        }

        // MISC FUNCTIONS
        webApp.utilities.convertAmount = amount => (amount * 100).toFixed(0);

        // Validation using jQuery.validate
        webApp.page.initializeValidation = () => {

            const validationRules = {
                "Product": {
                    required: true
                }
                , "Amount": {
                    required: true
                    , number: true
                }
                , "Name": {
                    required: true
                    , minlength: 2
                    , maxlength: 50
                }
                , "Postal Code": {
                    required: true

                }
            }

            const validationMessages = {
                "Product": {
                    required: "Select product"
                }
                , "Amount": {
                    required: "Amount is required"
                }
                , "Name": {
                    required: "Name is required"
                }
                , "Postal Code": {
                    required: "Postal Code is required"
                }

            }
            const validationOptions = {
                rules: validationRules
                , messages: validationMessages
            }

            $("#payment-form").validate(validationOptions);

        }


    })();

</script>



